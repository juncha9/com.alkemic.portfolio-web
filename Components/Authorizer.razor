@ChildContent
@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Inject]
    private ILogger<Authorizer> logger { get; set; }


    [Inject]
    protected AuthManager authManager { get; private set; }

    [Inject]
    protected AuthHandler authHandler { get; private set; }

    [CascadingParameter(Name = "RemoteIP")]
    public string RemoteIP { get; set; }

    protected Privilege privilege
    {
        get
        {
            if (authHandler?.AuthInfo != null) return authHandler.AuthInfo.Privilege;
            else return Privilege.None;
        }
    }

    private AuthInfo authInfo => authHandler?.AuthInfo;

    private AuthAttempt authAttempt => authHandler?.AuthAttempt;

    private AuthState authState 
    {
        get
        {
            if (authHandler != null) return authHandler.AuthState;
            else return AuthState.None;
        }
    }

    protected override void OnInitialized()
    {
        authHandler.RemoteIP = RemoteIP;
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if(firstRender == true)
        {
            if(authHandler != null && authHandler.SessionState == SessionState.NotLoaded)
            {
                await authHandler.LoadSessionData();
            }
        }
    }


}
